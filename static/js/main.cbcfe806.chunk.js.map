{"version":3,"sources":["redux/actions/actionTypes.ts","components/AddTaskForm/AddTaskForm.tsx","redux/actions/actions.ts","components/EditTaskModal/EditTaskForm/EditTaskForm.tsx","components/EditTaskModal/EditTaskModal.tsx","components/TasksList/TaskListItem/TaskListItem.tsx","components/TasksList/TasksList.tsx","App.tsx","redux/reducers/reducers.ts","redux/saga/saga.ts","redux/store/store.ts","index.tsx"],"names":["ADD_TASK","FETCH_TASK_BY_ID","EDIT_TASK","DELETE_TASK","FETCH_ALL","AddTaskForm","dispatch","useDispatch","useForm","register","handleSubmit","className","onSubmit","data","newTask","title","description","type","payload","htmlFor","name","ref","rows","value","EditTaskForm","taskSelector","useSelector","state","task","id","creationDate","editTask","defaultValue","data-bs-dismiss","EditTaskModal","tabIndex","aria-labelledby","aria-hidden","aria-label","TasksListItem","role","data-bs-toggle","data-bs-target","onClick","taskId","size","taskID","format","TasksList","tasksInState","todos","tasks","map","App","useEffect","initialState","rootReducer","action","filter","fetchAllAsync","addTaskAsync","editTaskAsync","fetchTaskByIdAsync","deleteTaskAsync","rootSaga","fakeFetch","response","a","ms","Promise","resolve","setTimeout","storeKey","getPersistedState","persistedState","localStorage","getItem","JSON","parse","saveState","setItem","stringify","addTask","currentId","length","Math","max","Number","Date","push","getTaskById","find","editedTask","updatedState","deleteTask","removedTask","put","takeEvery","middleware","createSagaMiddleware","currentState","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cbcfe806.chunk.js","sourcesContent":["export const ADD_TASK = 'ADD_TASK'\nexport const ADD_TASK_ASYNC = 'ADD_TASK_ASYNC'\nexport const FETCH_TASK_BY_ID = 'FETCH_TASK_BY_ID'\nexport const FETCH_TASK_BY_ID_ASYNC = 'FETCH_TASK_BY_ID_ASYNC'\nexport const EDIT_TASK = 'EDIT_TASK'\nexport const EDIT_TASK_ASYNC = 'EDIT_TASK_ASYNC'\nexport const DELETE_TASK = 'DELETE_TASK'\nexport const DELETE_TASK_ASYNC = 'DELETE_TASK_ASYNC'\nexport const FETCH_ALL = 'FETCH_ALL'\nexport const FETCH_ALL_ASYNC = 'FETCH_ALL_ASYNC'\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useForm } from 'react-hook-form'\nimport { addTask } from '../../redux/actions/actions'\nimport { INewTask } from '../../types/ITask'\n\nconst AddTaskForm = () => {\n\tconst dispatch = useDispatch()\n\tconst { register, handleSubmit } = useForm<INewTask>()\n\tconst onSubmit = (data: INewTask) => {\n\t\tconst newTask = {\n\t\t\ttitle: data.title,\n\t\t\tdescription: data.description,\n\t\t}\n\t\tdispatch(addTask(newTask))\n\t}\n\n\treturn (\n\t\t<form className=\"mb-5\" onSubmit={handleSubmit(onSubmit)}>\n\t\t\t<div className=\"mb-3\">\n\t\t\t\t<label\n\t\t\t\t\tclassName=\"form-label\"\n\t\t\t\t\thtmlFor=\"title\"\n\t\t\t\t>\n          \t\t\tAdd task&apos;s title:\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\tname=\"title\"\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tref={register}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"mb-3\">\n\t\t\t\t<label\n\t\t\t\t\tclassName=\"form-label\"\n\t\t\t\t\thtmlFor=\"description\"\n\t\t\t\t>\n          \t\t\tAdd task&apos;s description:\n\t\t\t\t</label>\n\t\t\t\t<textarea\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\tref={register}\n\t\t\t\t\trows={3}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<button type=\"submit\" className=\"btn btn-primary\" value=\"Submit\">Submit</button>\n\t\t</form>\n\t)\n}\n\nexport default AddTaskForm\n","import {\n\tADD_TASK, DELETE_TASK, EDIT_TASK, FETCH_ALL, FETCH_TASK_BY_ID,\n} from './actionTypes'\nimport ITask, { INewTask } from '../../types/ITask'\nimport {\n\tAddTaskActionType,\n\tDeleteTaskActionType,\n\tEditTaskActionType,\n\tFetchAllActionType,\n\tFetchTaskByIdActionType,\n} from '../../types/IActionTypes'\n\nexport function fetchAll(): FetchAllActionType {\n\treturn {\n\t\ttype: FETCH_ALL,\n\t}\n}\n\nexport function addTask(task: INewTask): AddTaskActionType {\n\treturn {\n\t\ttype: ADD_TASK,\n\t\tpayload: task,\n\t}\n}\n\nexport function fetchTaskById(taskId: ITask['id']): FetchTaskByIdActionType {\n\treturn {\n\t\ttype: FETCH_TASK_BY_ID,\n\t\tpayload: taskId,\n\t}\n}\n\nexport function editTask(task: ITask): EditTaskActionType {\n\treturn {\n\t\ttype: EDIT_TASK,\n\t\tpayload: { ...task },\n\t}\n}\n\nexport function deleteTask(taskID: ITask['id']): DeleteTaskActionType {\n\treturn {\n\t\ttype: DELETE_TASK,\n\t\tpayload: taskID,\n\t}\n}\n","import React from 'react'\nimport { SubmitHandler, useForm } from 'react-hook-form'\nimport { useDispatch, useSelector } from 'react-redux'\nimport IState from '../../../types/IState'\nimport ITask from '../../../types/ITask'\nimport { editTask } from '../../../redux/actions/actions'\n\nconst EditTaskForm = () => {\n\tconst dispatch = useDispatch()\n\tconst { register, handleSubmit } = useForm<ITask>()\n\tconst taskSelector = useSelector((state: IState) => state.task)\n\tconst { task } = { task: taskSelector }\n\tconst onSubmit: SubmitHandler<ITask> = data => {\n\t\tdata.id = taskSelector?.id as ITask['id']\n\t\tdata.creationDate = taskSelector?.creationDate as ITask['creationDate']\n\t\tdispatch(editTask(data))\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t<div className=\"mb-3\">\n\t\t\t\t<label\n\t\t\t\t\tclassName=\"form-label fw-normal fs-6\"\n\t\t\t\t\thtmlFor=\"title\"\n\t\t\t\t>\n          \t\t\tEdit task&apos;s title:\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\tname=\"title\"\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tref={register}\n\t\t\t\t\tdefaultValue={task?.title}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"mb-3\">\n\t\t\t\t<label\n\t\t\t\t\tclassName=\"form-label fw-normal fs-6\"\n\t\t\t\t\thtmlFor=\"description\"\n\t\t\t\t>\n\t\t\t\t\tEdit task&apos;s description:\n\t\t\t\t</label>\n\t\t\t\t<textarea\n\t\t\t\t\tname=\"description\"\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\tref={register}\n\t\t\t\t\trows={3}\n\t\t\t\t\tdefaultValue={task?.description}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"modal-footer border-top-0 p-0\">\n\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\" value=\"Submit\">Submit</button>\n\t\t\t\t<button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nexport default EditTaskForm\n","import * as React from 'react'\nimport EditTaskForm from './EditTaskForm/EditTaskForm'\n\nconst EditTaskModal = () =>\n\t<div\n\t\tclassName=\"modal fade\"\n\t\tid=\"editTaskModal\"\n\t\ttabIndex={-1}\n\t\taria-labelledby=\"editTaskModalLabel\"\n\t\taria-hidden=\"true\"\n\t>\n\t\t<div className=\"modal-dialog\">\n\t\t\t<div className=\"modal-content\">\n\t\t\t\t<div className=\"modal-header\">\n\t\t\t\t\t<h5 className=\"modal-title\">Modal title</h5>\n\t\t\t\t\t<button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"modal-body\">\n\t\t\t\t\t<EditTaskForm />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\nexport default EditTaskModal\n","import * as React from 'react'\nimport * as Icon from 'react-feather'\nimport { useDispatch } from 'react-redux'\nimport { format } from 'date-fns'\nimport ITask from '../../../types/ITask'\nimport EditTaskModal from '../../EditTaskModal/EditTaskModal'\nimport { deleteTask, fetchTaskById } from '../../../redux/actions/actions'\n\nconst TasksListItem = (task:ITask) => {\n\tconst dispatch = useDispatch()\n\n\treturn (\n\t\t<div className=\"card mb-3\">\n\t\t\t<div className=\"card-body\">\n\t\t\t\t<h5 className=\"card-title d-flex justify-content-between align-items-center\">\n\t\t\t\t\t{task.title}\n\t\t\t\t\t<div className=\"btn-group d-flex align-items-center\" role=\"group\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\ttitle=\"Edit task\"\n\t\t\t\t\t\t\taria-label=\"Edit\"\n\t\t\t\t\t\t\tclassName=\"btn btn-outline-secondary d-flex align-items-center\"\n\t\t\t\t\t\t\tdata-bs-toggle=\"modal\"\n\t\t\t\t\t\t\tdata-bs-target=\"#editTaskModal\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tdispatch(fetchTaskById(task.id))\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon.Edit2 size={20} />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<EditTaskModal />\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\ttitle=\"Delete task\"\n\t\t\t\t\t\t\taria-label=\"Delete task\"\n\t\t\t\t\t\t\tclassName=\"btn btn-outline-secondary d-flex align-items-center\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tdispatch(deleteTask(task.id))\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon.X size={20} />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</h5>\n\t\t\t\t<p className=\"card-text\">{task.description}</p>\n\t\t\t\t<p className=\"card-text\">\n          Created:\n\t\t\t\t\t{format(task.creationDate, 'PPp')}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default TasksListItem\n","import * as React from 'react'\nimport IState from '../../types/IState'\nimport ITask from '../../types/ITask'\nimport TasksListItem from './TaskListItem/TaskListItem'\n\nconst TasksList = (tasksInState: IState) => {\n\tconst todos = (tasksInState.tasks || []).map((task: ITask) =>\n\t\t<div className=\"col-4\" key={task.id}>\n\t\t\t<TasksListItem {...task} />\n\t\t</div>,\n\t)\n\treturn <div className=\"row\">{todos}</div>\n}\n\nexport default TasksList\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport AddTaskForm from './components/AddTaskForm/AddTaskForm'\nimport IState from './types/IState'\nimport TasksList from './components/TasksList/TasksList'\nimport { fetchAll } from './redux/actions/actions'\n\nconst App = () => {\n\tconst dispatch = useDispatch()\n\tconst tasksInState: IState = {\n\t\ttasks: useSelector((state: IState) => state.tasks),\n\t}\n\tuseEffect(() => {\n\t\tdispatch(fetchAll())\n\t}, [dispatch])\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<h1 className=\"mt-3 text-center\">To Do List</h1>\n\t\t\t<AddTaskForm />\n\t\t\t<TasksList {...tasksInState} />\n\t\t</div>\n\t)\n}\n\nexport default App\n","import {\n\tAddTaskAsyncActionType,\n\tDeleteTaskAsyncActionType,\n\tEditTaskActionType,\n\tFetchAllActionType,\n\tFetchTaskByIdActionType,\n\tFetchTaskByIdAsyncActionType,\n} from '../../types/IActionTypes'\nimport IState from '../../types/IState'\n\nconst initialState: IState = {\n\ttasks: [],\n}\n\ntype ActionType = FetchAllActionType | AddTaskAsyncActionType | FetchTaskByIdAsyncActionType | FetchTaskByIdActionType | EditTaskActionType | DeleteTaskAsyncActionType\n\nconst rootReducer = (state = initialState, action: ActionType): IState => {\n\tswitch (action.type) {\n\t\tcase 'FETCH_ALL_ASYNC':\n\t\t\tif (action.payload) {\n\t\t\t\treturn { tasks: action.payload }\n\t\t\t}\n\t\t\treturn { tasks: [] }\n\n\t\tcase 'ADD_TASK_ASYNC':\n\t\t\tif (state.tasks) {\n\t\t\t\treturn { tasks: [...state.tasks, action.payload] }\n\t\t\t}\n\t\t\treturn { tasks: [action.payload] }\n\n\t\tcase 'FETCH_TASK_BY_ID':\n\t\t\treturn { tasks: state.tasks } // clear task\n\t\tcase 'FETCH_TASK_BY_ID_ASYNC':\n\t\t\tif (state.tasks) {\n\t\t\t\treturn { ...state, task: action.payload }\n\t\t\t}\n\t\t\treturn { ...state }\n\n\t\tcase 'EDIT_TASK_ASYNC':\n\t\t\tif (state.tasks) {\n\t\t\t\tconst tasks = state.tasks.map(task => {\n\t\t\t\t\tif (task.id === action.payload.id) {\n\t\t\t\t\t\ttask.title = action.payload.title\n\t\t\t\t\t\ttask.description = action.payload.description\n\t\t\t\t\t}\n\t\t\t\t\treturn task\n\t\t\t\t})\n\t\t\t\treturn { tasks: [...tasks] }\n\t\t\t}\n\t\t\treturn { ...state }\n\n\t\tcase 'DELETE_TASK_ASYNC':\n\t\t\tif (state.tasks) {\n\t\t\t\tconst tasks = state.tasks.filter(task => task.id !== action.payload.id)\n\t\t\t\treturn { tasks: [...tasks] }\n\t\t\t}\n\t\t\treturn { ...state }\n\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default rootReducer\n","import { put, takeEvery } from 'redux-saga/effects'\nimport {\n\tADD_TASK, ADD_TASK_ASYNC, DELETE_TASK, DELETE_TASK_ASYNC, EDIT_TASK, EDIT_TASK_ASYNC, FETCH_ALL, FETCH_ALL_ASYNC, FETCH_TASK_BY_ID, FETCH_TASK_BY_ID_ASYNC,\n} from '../actions/actionTypes'\nimport {\n\tAddTaskActionType, DeleteTaskActionType, EditTaskActionType, FetchTaskByIdActionType,\n} from '../../types/IActionTypes'\nimport ITask, { INewTask } from '../../types/ITask'\n\n// imitate server call\nasync function fakeFetch(response: any, ms = 300) {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(() => {\n\t\t\tresolve(response)\n\t\t}, ms)\n\t})\n}\n\nconst storeKey = 'tasks'\nconst getPersistedState = () => {\n\tconst persistedState = localStorage.getItem(storeKey)\n\treturn persistedState\n\t\t? JSON.parse(persistedState) as ITask[]\n\t\t: []\n}\nconst saveState = (tasks: ITask[]): void => {\n\tlocalStorage.setItem(storeKey, JSON.stringify(tasks))\n}\n\nconst addTask = (newTask: INewTask): ITask => {\n\tconst persistedState = getPersistedState()\n\tconst currentId = persistedState.length\n\t\t? Math.max(...persistedState.map(task => task.id || 0))\n\t\t: 0\n\tconst task = {\n\t\t...newTask,\n\t\tid: currentId + 1,\n\t\tcreationDate: Number(new Date()),\n\t}\n\tpersistedState.push(task)\n\tsaveState(persistedState)\n\treturn task\n}\n\nconst getTaskById = (taskId: ITask['id']): ITask => {\n\tconst persistedState = getPersistedState()\n\tconst currentTask = persistedState.find(task => task.id === taskId) as ITask\n\treturn currentTask\n}\n\nconst editTask = (editedTask: ITask): ITask => {\n\tconst persistedState = getPersistedState()\n\tconst updatedState = persistedState.map(task => {\n\t\tif (task.id === editedTask.id) {\n\t\t\ttask.title = editedTask.title\n\t\t\ttask.description = editedTask.description\n\t\t}\n\t\treturn task\n\t})\n\tsaveState(updatedState)\n\treturn editedTask\n}\n\nconst deleteTask = (taskId: ITask['id']): ITask | null => {\n\tconst persistedState = getPersistedState()\n\tconst removedTask = persistedState.find(task => task.id === taskId) || null\n\tconst tasks = persistedState.filter(task => task.id !== taskId)\n\tsaveState(tasks)\n\treturn removedTask\n}\n\nexport function* fetchAllAsync() {\n\tconst state = getPersistedState()\n\tconst response = yield fakeFetch(state)\n\tyield put({ type: FETCH_ALL_ASYNC, payload: response })\n}\n\nexport function* addTaskAsync(action: AddTaskActionType) {\n\tconst task = addTask(action.payload)\n\t// we can also return full list of tasks\n\t// yield fetchAllAsync();\n\n\tconst response = yield fakeFetch(task)\n\tyield put({ type: ADD_TASK_ASYNC, payload: response })\n}\n\nexport function* editTaskAsync(action: EditTaskActionType) {\n\tconst editedTask = editTask(action.payload)\n\t// we can also return full list of tasks\n\t// yield fetchAllAsync();\n\n\tconst response = yield fakeFetch(editedTask)\n\tyield put({ type: EDIT_TASK_ASYNC, payload: response })\n}\n\nexport function* fetchTaskByIdAsync(action: FetchTaskByIdActionType) {\n\tconst task = getTaskById(action.payload)\n\tconst response = yield fakeFetch(task)\n\tyield put({ type: FETCH_TASK_BY_ID_ASYNC, payload: response })\n}\n\nexport function* deleteTaskAsync(action: DeleteTaskActionType) {\n\tconst removedTask = deleteTask(action.payload)\n\t// we can also return full list of tasks\n\t// yield fetchAllAsync();\n\n\tconst response = yield fakeFetch(removedTask)\n\tyield put({ type: DELETE_TASK_ASYNC, payload: response })\n}\n\nexport default function* rootSaga() {\n\tyield takeEvery(FETCH_ALL, fetchAllAsync)\n\tyield takeEvery(FETCH_TASK_BY_ID, fetchTaskByIdAsync)\n\tyield takeEvery(ADD_TASK, addTaskAsync)\n\tyield takeEvery(EDIT_TASK, editTaskAsync)\n\tyield takeEvery(DELETE_TASK, deleteTaskAsync)\n}\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from '../reducers/reducers'\nimport IState from '../../types/IState'\nimport rootSaga from '../saga/saga'\n\nconst middleware = createSagaMiddleware()\n\nconst defaultState: IState = { tasks: [] }\n\nconst currentState = defaultState\n\nconst store = createStore(\n\trootReducer,\n\tcurrentState,\n\tcompose(\n\t\tapplyMiddleware(middleware),\n\t\t(window as any).__REDUX_DEVTOOLS_EXTENSION__\n        && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n\t),\n)\n\nmiddleware.run(rootSaga)\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport store from './redux/store/store'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'),\n)\n"],"sourceRoot":""}